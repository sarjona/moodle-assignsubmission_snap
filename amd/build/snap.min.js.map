{"version":3,"sources":["../src/snap.js"],"names":["snapMode","userid","attemptNumber","init","xmlProject","mode","user","attempt","txt","document","createElement","innerHTML","initializeProject","value","snapIDE","getIDE","getXMLProject","rawOpenProjectString","enableEmbedMode","form","getXMLInput","closest","registerListenerEvents","preventWindowChanges","customizeSnap","getSnapFrame","getElementById","snapFrame","snapWorld","contentWindow","world","addEventListener","children","xmlInput","updateProject","setEmbedMode","toggleAppMode","onbeforeunload","serializer","serialize","stage"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles the display and events of the Snap! editor.\n *\n * @module     assignsubmission_snap/snap\n * @package    assignsubmission_snap\n * @copyright  2020 Sara Arjona <sara@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\n\nlet snapMode = 'edit';\nlet userid = 0;\nlet attemptNumber = 0;\n\nexport const init = (xmlProject, mode, user, attempt) => {\n    snapMode = mode;\n    userid = user;\n    attemptNumber = attempt;\n\n    let txt = document.createElement('textarea');\n    txt.innerHTML = xmlProject;\n    initializeProject(txt.value, snapMode, userid, attemptNumber);\n};\n\nconst initializeProject = (xmlProject, snapMode, userid, attemptNumber) => {\n    // Load the xmlProject (if not empty).\n    const snapIDE = getIDE(xmlProject, snapMode, userid, attemptNumber);\n    if (!xmlProject) {\n        xmlProject = getXMLProject();\n    }\n\n    if (snapIDE) {\n        if (xmlProject) {\n            // Update the XML project.\n            snapIDE.rawOpenProjectString(xmlProject);\n        }\n        if (snapMode == 'embed') {\n            enableEmbedMode(snapIDE);\n        } else if (snapMode == 'edit') {\n            // Register events (to update the hiddent xmlproject field when the form is submitted).\n            const form = getXMLInput().closest('form');\n            registerListenerEvents(form);\n        } else {\n            preventWindowChanges();\n        }\n\n        // Customize Snap!, to hide Cloud options.\n        customizeSnap();\n    }\n};\n\nconst getSnapFrame = (mode, user, attempt) => {\n    if (!mode) {\n        mode = snapMode;\n    }\n    if (!user) {\n        user = userid;\n    }\n    if (!attempt) {\n        attempt = attemptNumber;\n    }\n    return document.getElementById('snap-' + mode + '-' + user + '-' + attempt);\n};\n\nconst getIDE = (xmlProject, snapMode, userid, attemptNumber) => {\n    const snapFrame = getSnapFrame(snapMode, userid, attemptNumber);\n    if (snapFrame) {\n        const snapWorld = snapFrame.contentWindow.world;\n        if (!snapWorld) {\n            snapFrame.addEventListener(\n                'load',\n                function() {\n                    initializeProject(xmlProject, snapMode, userid, attemptNumber);\n                },\n                true\n            );\n        } else {\n            return snapWorld.children[0];\n        }\n    }\n\n    return;\n};\n\nconst getXMLProject = () => {\n    let xmlProject = '';\n\n    const xmlInput = getXMLInput();\n    if (xmlInput) {\n        xmlProject = getXMLInput().value;\n    }\n\n    return xmlProject;\n};\n\nconst getXMLInput = () => {\n    return $('input[name=\"xmlproject\"]')[0];\n};\n\nconst registerListenerEvents = (form) => {\n    form.addEventListener('submit', updateProject);\n};\n\nconst enableEmbedMode = (snapIDE) => {\n    snapIDE.setEmbedMode();\n    snapIDE.toggleAppMode(true);\n    preventWindowChanges();\n};\n\nconst preventWindowChanges = () => {\n    const snapFrame = getSnapFrame();\n    snapFrame.contentWindow.onbeforeunload = null;\n};\n\nconst customizeSnap = () => {\n/*\n    const snapFrame = getSnapFrame();\n\n    // It would disable the Cloud menu (but it doesn't hide it).\n    // For now, it will be leave as it is (because it might help users to find and load their Snap! Cloud projects).\n    snapFrame.contentWindow.IDE_Morph.prototype.cloudMenu = function () {\n        this.showMessage('Cloud unavailable from Snap! assignment submission');\n        return;\n    };\n*/\n};\n\nconst updateProject = () => {\n    const xmlProject = getXMLInput();\n    const snapIDE = getIDE(xmlProject);\n    xmlProject.value = snapIDE.serializer.serialize(snapIDE.stage);\n    preventWindowChanges();\n};\n"],"file":"snap.min.js"}